// > appserve@0.0.5 start /home/studio/appserve
// > node src/app.js
// Master 28735 is running
// Worker 28741 started
// Server is running at PORT: 3001
// Worker 28742 started
// Worker 28747 started
// Worker 28752 started
// Server is running at PORT: 3001
// Server is running at PORT: 3001
// Server is running at PORT: 3001
// nodejs req:

IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0
    },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null
  },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular
      ],
        onread: [Function: onread
      ],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true
    },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object
      ],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
    },
     readable: true,
     domain: null,
     _events: { end: [Array
      ],
        _socketEnd: [Function: onSocketEnd
      ],
        drain: [Array
      ],
        timeout: [Function: socketOnTimeout
      ],
        data: [Function: bound socketOnData
      ],
        error: [Function: socketOnError
      ],
        close: [Array
      ],
        resume: [Function: onSocketResume
      ],
        pause: [Function: onSocketPause
      ]
    },
     _eventsCount: 9,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
      ],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
      ]
    },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '4: null: 3001',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 7
    },
     _server: 
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '4: null: 3001',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 7
    },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idleStart: 6511,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders
      ],
        '1': [Function: parserOnHeadersComplete
      ],
        '2': [Function: parserOnBody
      ],
        '3': [Function: parserOnMessageComplete
      ],
        '4': [Function: bound onParserExecute
      ],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular
      ],
        incoming: [Circular
      ],
        outgoing: null,
        parsingHeadersStart: 0,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming
      ],
      [Symbol(isReused)
      ]: false
    },
     on: [Function: socketOnWrap
    ],
     _paused: false,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
      ],
        connection: [Circular
      ],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData
      ],
        _sent100: false,
        _expect_continue: false,
      [Symbol(outHeadersKey)
      ]: [Object
      ]
    },
    [Symbol(asyncId)
    ]: 10,
    [Symbol(bytesRead)
    ]: 0,
    [Symbol(asyncId)
    ]: 14,
    [Symbol(triggerAsyncId)
    ]: 10
  },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular
      ],
        onread: [Function: onread
      ],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true
    },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object
      ],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
    },
     readable: true,
     domain: null,
     _events: { end: [Array
      ],
        _socketEnd: [Function: onSocketEnd
      ],
        drain: [Array
      ],
        timeout: [Function: socketOnTimeout
      ],
        data: [Function: bound socketOnData
      ],
        error: [Function: socketOnError
      ],
        close: [Array
      ],
        resume: [Function: onSocketResume
      ],
        pause: [Function: onSocketPause
      ]
    },
     _eventsCount: 9,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
      ],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
      ]
    },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '4: null: 3001',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 7
    },
     _server: 
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '4: null: 3001',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 7
    },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idleStart: 6511,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders
      ],
        '1': [Function: parserOnHeadersComplete
      ],
        '2': [Function: parserOnBody
      ],
        '3': [Function: parserOnMessageComplete
      ],
        '4': [Function: bound onParserExecute
      ],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular
      ],
        incoming: [Circular
      ],
        outgoing: null,
        parsingHeadersStart: 0,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming
      ],
      [Symbol(isReused)
      ]: false
    },
     on: [Function: socketOnWrap
    ],
     _paused: false,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
      ],
        connection: [Circular
      ],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData
      ],
        _sent100: false,
        _expect_continue: false,
      [Symbol(outHeadersKey)
      ]: [Object
      ]
    },
    [Symbol(asyncId)
    ]: 10,
    [Symbol(bytesRead)
    ]: 0,
    [Symbol(asyncId)
    ]: 14,
    [Symbol(triggerAsyncId)
    ]: 10
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { host: 'www.saugatcomputer.com: 3001',
     connection: 'keep-alive',
     'upgrade-insecure-requests': '1',
     'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36',
     accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,* /*;q=0.8',
     'accept-encoding': 'gzip, deflate',
     'accept-language': 'en-IN,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',
     cookie: 'TawkConnectionTime=0; __tawkuuid=e::saugatcomputer.com::/R4zWgc4VPkRwTKOGbmAyfjNiC4RYUO7tYsNFI2eTF71wpPinp8pKfTIUQe3IjMU::2' },
  rawHeaders: 
   [ 'Host',
     'www.saugatcomputer.com:3001',
     'Connection',
     'keep-alive',
     'Upgrade-Insecure-Requests',
     '1',
     'User-Agent',
     'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36',
     'Accept',
     'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
     'Accept-Encoding',
     'gzip, deflate',
     'Accept-Language',
     'en-IN,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',
     'Cookie',
     'TawkConnectionTime=0; __tawkuuid=e: :saugatcomputer.com: :/R4zWgc4VPkRwTKOGbmAyfjNiC4RYUO7tYsNFI2eTF71wpPinp8pKfTIUQe3IjMU: : 2'
  ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular
      ],
        onread: [Function: onread
      ],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true
    },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object
      ],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
    },
     readable: true,
     domain: null,
     _events: { end: [Array
      ],
        _socketEnd: [Function: onSocketEnd
      ],
        drain: [Array
      ],
        timeout: [Function: socketOnTimeout
      ],
        data: [Function: bound socketOnData
      ],
        error: [Function: socketOnError
      ],
        close: [Array
      ],
        resume: [Function: onSocketResume
      ],
        pause: [Function: onSocketPause
      ]
    },
     _eventsCount: 9,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
      ],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
      ]
    },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '4: null: 3001',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 7
    },
     _server: 
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '4: null: 3001',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 7
    },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idleStart: 6511,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders
      ],
        '1': [Function: parserOnHeadersComplete
      ],
        '2': [Function: parserOnBody
      ],
        '3': [Function: parserOnMessageComplete
      ],
        '4': [Function: bound onParserExecute
      ],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular
      ],
        incoming: [Circular
      ],
        outgoing: null,
        parsingHeadersStart: 0,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming
      ],
      [Symbol(isReused)
      ]: false
    },
     on: [Function: socketOnWrap
    ],
     _paused: false,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
      ],
        connection: [Circular
      ],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData
      ],
        _sent100: false,
        _expect_continue: false,
      [Symbol(outHeadersKey)
      ]: [Object
      ]
    },
    [Symbol(asyncId)
    ]: 10,
    [Symbol(bytesRead)
    ]: 0,
    [Symbol(asyncId)
    ]: 14,
    [Symbol(triggerAsyncId)
    ]: 10
  },
  _consuming: false,
  _dumped: false
}
www.saugatcomputer.com: 3001
saugatcomputer
/home/studio/www/saugatcomputer.com: 3001/
{ Error: ENOENT: no such file or directory, stat '/home/studio/www/saugatcomputer.com: 3001/'
    at Object.fs.statSync (fs.js: 948: 11)
    at Promise (/home/studio/appserve/src/app.js: 92: 16)
    at new Promise (<anonymous>)
    at Server.server.on (/home/studio/appserve/src/app.js: 47: 21)
    at emitTwo (events.js: 126: 13)
    at Server.emit (events.js: 214: 7)
    at parserOnIncoming (_http_server.js: 656: 12)
    at HTTPParser.parserOnHeadersComplete (_http_common.js: 119: 17)
  errno: -2,
  code: 'ENOENT',
  syscall: 'stat',
  path: '/home/studio/www/saugatcomputer.com: 3001/'
}